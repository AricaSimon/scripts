//------------------------------------------------
//--- 010 Editor v10.0 Binary Template
//
//      File: GPT.bt
//   Authors: Jordan Kimball
//   Version: 1.0
//   Purpose: Decodes GPT Table 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History:
//------------------------------------------------
typedef struct{
    uint part1 <format=hex,hidden=true>;
    Printf("%X hex number",part1);
    ushort part2 <format=hex,hidden=true>;
    ushort part3 <format=hex,hidden=true>;
    BigEndian();    
    ushort part4 <format=hex,hidden=true>;
    //combined b/c no 6 byte variable type
    uint part5_1 <format=hex,hidden=true>;
    ushort part5_2 <format=hex,hidden=true>;
    LittleEndian();
    local string GUID;
    SPrintf(GUID,"%X-%X-%X-%X-%X%X",part1,part2,part3,part4,part5_1,part5_2);
} GUID;

typedef struct{
    char signature[8]<fgcolor=cLtRed>;
    uint revision<fgcolor=cLtGreen>;
    uint header_size<fgcolor=cLtBlue>;
    uint crc32<fgcolor=cAqua>;
    uint reserved<fgcolor=cLtPurple>;
    uint64 current_lba<fgcolor=cLtYellow>;
    uint64 backup_lba<fgcolor=cLtRed>;
    uint64 first_usable_lba<fgcolor=cLtGreen>;
    uint64 last_usable_lba<fgcolor=cLtBlue>;
    GUID disk_guid<fgcolor=cAqua>;
    uint64 lba_partiton_entry_array<fgcolor=cLtPurple>;
    uint total_partition_slots<fgcolor=cLtYellow>;
    uint size_partition_slot<fgcolor=cLtRed>;
    uint crc32_partition_arrayl<fgcolor=cLtGreen>;
    byte reserved2[420]<fgcolor=cLtBlue>;
} GPT_Header;



typedef struct {
    GUID part_type_guid<fgcolor=cLtRed>;
    GUID part_unique_guid<fgcolor=cLtGreen>;
    uint64 start_lba<fgcolor=cLtBlue>;
    uint64 end_lba<fgcolor=cLtPurple>;
    local uint64 size = end_lba-start_lba+1;
    uint64 attributes<fgcolor=cLtYellow>;
    //defines unicode string
    wchar_t name[36]<fgcolor=cAqua>;
    
} GPT_Partition_Entry;

void readGPT(int offset){
    LittleEndian();
    FSeek(offset);
    GPT_Header header<bgcolor=0xA0A0A0,name="GPT Header">;
    local int i=0;
    //010 editor doesnt support an array of strings :/
    local int colors[6]={0x000080, 0x008000,0x800080,0x808000,0x008080,0x404040};
    for(i=0;i<128 ;i++){
        int64 temp <hidden=true>;
        if(temp==0){
            FSkip(120);
        }else{
            FSkip(-8);
            SetBackColor(colors[i%6]);
            GPT_Partition_Entry part;
        }
        SetBackColor(0xffffffff);
    } 
}

readGPT(512);

//GPT_Partition_Entry parts[128];

